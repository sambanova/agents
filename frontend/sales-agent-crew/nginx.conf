worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Increase request size limit
    client_max_body_size 30M;

    # Increase timeouts
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    send_timeout 300s;

    sendfile on;
    keepalive_timeout 65;

    # -----------------------------
    # 1) HTTP -> HTTPS Redirect
    # -----------------------------
    server {
        listen 80;
        listen [::]:80;
        server_name _;
        
        return 301 https://$host$request_uri;
    }

    # -----------------------------
    # 2) HTTPS Server
    # -----------------------------
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        # It's good practice to specify the domain:
        server_name cloud-ai-starter-kits-external-demo-1.snova.ai;

        # SSL Certs (mapped in from /etc/sn-certs)
        ssl_certificate     /etc/sn-certs/snova.ai/fullchain.pem;
        ssl_certificate_key /etc/sn-certs/snova.ai/privkey.pem;
        ssl_protocols       TLSv1.2 TLSv1.3;

        # Root directory for built frontend
        root   /usr/share/nginx/html;
        index  index.html index.htm;

        # --------------------------------
        # 2a) Serve Vue SPA
        # --------------------------------
        location / {
            # SPA fallback
            try_files $uri $uri/ /index.html;
        }

        # --------------------------------
        # 2b) Proxy /api to backend
        # --------------------------------
        location /api/ {
            proxy_pass http://backend:8000/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS headers (optional, depends on your needs)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            # Handle OPTIONS
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # --------------------------------
        # 2c) Proxy /chat (WebSocket)
        # --------------------------------
        location /chat {
            proxy_pass http://backend:8000/chat;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
