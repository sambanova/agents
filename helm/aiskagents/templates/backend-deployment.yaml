apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.backend.name }}
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: {{ .Values.backend.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.backend.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.backend.name }}
    spec:
      terminationGracePeriodSeconds: 60
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Values.backend.name }}
              topologyKey: kubernetes.io/hostname
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
      - name: {{ .name }}
      {{- end }}
      volumes:
      - name: logs-volume
        hostPath:
          path: {{ .Values.backend.volumes.logs.hostPath }}
          type: DirectoryOrCreate
      initContainers:
      - name: fix-permissions
        image: busybox
        command: ["sh", "-c", "chmod -R 777 /app/logs"]
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
      containers:
      - name: {{ .Values.backend.name }}-container
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]
        ports:
        - containerPort: {{ .Values.backend.service.targetPort }}
        volumeMounts:
        - name: logs-volume
          mountPath: {{ .Values.backend.volumes.logs.mountPath }}
        resources:
          limits:
            cpu: {{ .Values.backend.resources.limits.cpu | quote }}
            memory: {{ .Values.backend.resources.limits.memory | quote }}
          requests:
            cpu: {{ .Values.backend.resources.requests.cpu | quote }}
            memory: {{ .Values.backend.resources.requests.memory | quote }}
        livenessProbe:
          httpGet:
            path: {{ .Values.backend.probes.liveness.path }}
            port: {{ .Values.backend.probes.liveness.port }}
          initialDelaySeconds: {{ .Values.backend.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.backend.probes.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.backend.probes.liveness.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.backend.probes.readiness.path }}
            port: {{ .Values.backend.probes.readiness.port }}
          initialDelaySeconds: {{ .Values.backend.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.backend.probes.readiness.periodSeconds }}
        env:
        {{- range $key, $value := .Values.backend.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        {{- range $key, $value := .Values.backend.secrets.data }}
        - name: {{ $key }}
          valueFrom:
            secretKeyRef:
              name: {{ $.Values.backend.secrets.name }}
              key: {{ $key }}
        {{- end }} 